[{"/Users/kev/Documents/GitHub/Backtesting_Model/src/App.js":"1","/Users/kev/Documents/GitHub/Backtesting_Model/src/index.js":"2","/Users/kev/Documents/GitHub/Backtesting_Model/src/reportWebVitals.js":"3","/Users/kev/Documents/GitHub/Backtesting_Model/src/Demo.js":"4","/Users/kev/Documents/GitHub/Backtesting_Model/src/FileHandler.js":"5"},{"size":2523,"mtime":1610058316051,"results":"6","hashOfConfig":"7"},{"size":500,"mtime":1609620136862,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1609223852412,"results":"9","hashOfConfig":"7"},{"size":2478,"mtime":1609898524313,"results":"10","hashOfConfig":"7"},{"size":7063,"mtime":1609621349086,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"6vidah",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},"/Users/kev/Documents/GitHub/Backtesting_Model/src/App.js",[],["25","26"],"/Users/kev/Documents/GitHub/Backtesting_Model/src/index.js",[],"/Users/kev/Documents/GitHub/Backtesting_Model/src/reportWebVitals.js",[],"/Users/kev/Documents/GitHub/Backtesting_Model/src/Demo.js",[],"/Users/kev/Documents/GitHub/Backtesting_Model/src/FileHandler.js",["27","28","29"],"import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst mimeTypeRegexp = /^(application|audio|example|image|message|model|multipart|text|video)\\/[a-z0-9\\.\\+\\*-]+$/;\nconst extRegexp = /\\.[a-zA-Z0-9]*$/;\n\nclass Files extends React.Component {\n  constructor (props, context) {\n    super(props, context)\n    this.onDrop = this.onDrop.bind(this)\n    this.onDragEnter = this.onDragEnter.bind(this)\n    this.onDragLeave = this.onDragLeave.bind(this)\n    this.openFileChooser = this.openFileChooser.bind(this)\n\n    this.id = 1\n\n    this.state = {\n      files: []\n    }\n  }\n\n  onDrop (event) {\n    event.preventDefault()\n    this.onDragLeave(event)\n\n    // Collect added files, perform checking, cast pseudo-array to Array,\n    // then return to method\n    let filesAdded = event.dataTransfer ? event.dataTransfer.files : event.target.files\n\n    // Multiple files dropped when not allowed\n    if (this.props.multiple === false && filesAdded.length > 1) {\n      filesAdded = [filesAdded[0]]\n    }\n\n    let files = []\n    for (let i = 0; i < filesAdded.length; i++) {\n      let file = filesAdded[i]\n\n      // Assign file an id\n      file.id = 'files-' + this.id++\n\n      // Tell file it's own extension\n      file.extension = this.fileExtension(file)\n\n      // Tell file it's own readable size\n      file.sizeReadable = this.fileSizeReadable(file.size)\n\n      // Add preview, either image or file extension\n      if (file.type && this.mimeTypeLeft(file.type) === 'image') {\n        file.preview = {\n          type: 'image',\n          url: window.URL.createObjectURL(file)\n        }\n      } else {\n        file.preview = {\n          type: 'file'\n        }\n      }\n\n      // Check for file max limit\n      if (this.state.files.length + files.length >= this.props.maxFiles) {\n        this.onError({\n          code: 4,\n          message: 'maximum file count reached'\n        }, file)\n        break\n      }\n\n      // If file is acceptable, push or replace\n      if (this.fileTypeAcceptable(file) && this.fileSizeAcceptable(file)) {\n        files.push(file)\n      }\n    }\n    this.setState({\n      files: this.props.multiple === false\n        ? files\n        : [...this.state.files, ...files]\n    }, () => {\n      this.props.onChange.call(this, this.state.files)\n    })\n  }\n\n  onDragOver (event) {\n    event.preventDefault()\n    event.stopPropagation()\n  }\n\n  onDragEnter (event) {\n    let el = this.dropzone\n    el.className += ' ' + this.props.dropActiveClassName\n  }\n\n  onDragLeave (event) {\n    let el = this.dropzone\n    this.dropzone.className = el.className.replace(' ' + this.props.dropActiveClassName, '')\n  }\n\n  openFileChooser () {\n    this.inputElement.value = null\n    this.inputElement.click()\n  }\n\n  fileTypeAcceptable (file) {\n    let accepts = this.props.accepts;\n    if (!accepts) {\n      return true\n    }\n\n    const result = accepts.some(accept => {\n      if (file.type && accept.match(mimeTypeRegexp)) {\n        let typeLeft = this.mimeTypeLeft(file.type)\n        let typeRight = this.mimeTypeRight(file.type)\n        let acceptLeft = accept.split('/')[0]\n        let acceptRight = accept.split('/')[1]\n        if (acceptLeft && acceptRight) {\n          if (acceptLeft === typeLeft && acceptRight === '*') {\n            return true\n          }\n          if (acceptLeft === typeLeft && acceptRight === typeRight) {\n            return true\n          }\n        }\n      } else if (file.extension && accept.match(extRegexp)) {\n        const ext = accept.substr(1);\n        return file.extension.toLowerCase() === ext.toLowerCase();\n      }\n      return false\n    });\n\n    if (!result) {\n      this.onError({\n        code: 1,\n        message: file.name + ' is not a valid file type'\n      }, file)\n    }\n\n    return result\n  }\n\n  fileSizeAcceptable (file) {\n    if (file.size > this.props.maxFileSize) {\n      this.onError({\n        code: 2,\n        message: file.name + ' is too large'\n      }, file)\n      return false\n    } else if (file.size < this.props.minFileSize) {\n      this.onError({\n        code: 3,\n        message: file.name + ' is too small'\n      }, file)\n      return false\n    } else {\n      return true\n    }\n  }\n\n  mimeTypeLeft (mime) {\n    return mime.split('/')[0]\n  }\n\n  mimeTypeRight (mime) {\n    return mime.split('/')[1]\n  }\n\n  fileExtension (file) {\n    let extensionSplit = file.name.split('.')\n    if (extensionSplit.length > 1) {\n      return extensionSplit[extensionSplit.length - 1]\n    } else {\n      return 'none'\n    }\n  }\n\n  fileSizeReadable (size) {\n    if (size >= 1000000000) {\n      return Math.ceil(size / 1000000000) + 'GB'\n    } else if (size >= 1000000) {\n      return Math.ceil(size / 1000000) + 'MB'\n    } else if (size >= 1000) {\n      return Math.ceil(size / 1000) + 'kB'\n    } else {\n      return Math.ceil(size) + 'B'\n    }\n  }\n\n  onError (error, file) {\n    this.props.onError.call(this, error, file)\n  }\n\n  removeFile (fileToRemove) {\n    this.setState({\n      files: this.state.files.filter(file => file.id !== fileToRemove.id)\n    }, () => {\n      this.props.onChange.call(this, this.state.files)\n    })\n  }\n\n  removeFiles () {\n    this.setState({\n      files: []\n    }, () => {\n      this.props.onChange.call(this, this.state.files)\n    })\n  }\n\n  render () {\n    const inputAttributes = {\n      type: 'file',\n      accept: this.props.accepts ? this.props.accepts.join() : '',\n      multiple: this.props.multiple,\n      name: this.props.name,\n      style: { display: 'none' },\n      ref: (element) => {\n        this.inputElement = element\n      },\n      onChange: this.onDrop\n    }\n\n    return (\n      <div>\n        <input\n          {...inputAttributes}\n        />\n        <div\n          className={this.props.className}\n          onClick={\n            this.props.clickable === true\n              ? this.openFileChooser\n              : null\n          }\n          onDrop={this.onDrop}\n          onDragOver={this.onDragOver}\n          onDragEnter={this.onDragEnter}\n          onDragLeave={this.onDragLeave}\n          ref={dropzone => { this.dropzone = dropzone }}\n          style={this.props.style}\n        >\n          {this.props.children}\n        </div>\n      </div>\n    )\n  }\n}\n\nFiles.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node\n  ]),\n  className: PropTypes.string.isRequired,\n  dropActiveClassName: PropTypes.string,\n  onChange: PropTypes.func,\n  onError: PropTypes.func,\n  accepts: PropTypes.array,\n  multiple: PropTypes.bool,\n  maxFiles: PropTypes.number,\n  maxFileSize: PropTypes.number,\n  minFileSize: PropTypes.number,\n  clickable: PropTypes.bool,\n  name: PropTypes.string,\n  style: PropTypes.object\n}\n\nFiles.defaultProps = {\n  onChange: function (files) {\n    console.log(files)\n  },\n  onError: function (error, file) {\n    console.log('error code ' + error.code + ': ' + error.message)\n  },\n  className: 'files-dropzone',\n  dropActiveClassName: 'files-dropzone-active',\n  accepts: null,\n  multiple: true,\n  maxFiles: Infinity,\n  maxFileSize: Infinity,\n  minFileSize: 0,\n  name: 'file',\n  clickable: true\n}\n\nexport default Files\n",["30","31"],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":4,"column":103,"nodeType":"38","messageId":"39","endLine":4,"endColumn":104,"suggestions":"40"},{"ruleId":"36","severity":1,"message":"41","line":4,"column":105,"nodeType":"38","messageId":"39","endLine":4,"endColumn":106,"suggestions":"42"},{"ruleId":"36","severity":1,"message":"43","line":4,"column":107,"nodeType":"38","messageId":"39","endLine":4,"endColumn":108,"suggestions":"44"},{"ruleId":"32","replacedBy":"45"},{"ruleId":"34","replacedBy":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["49","50"],"Unnecessary escape character: \\+.",["51","52"],"Unnecessary escape character: \\*.",["53","54"],["47"],["48"],"no-global-assign","no-unsafe-negation",{"messageId":"55","fix":"56","desc":"57"},{"messageId":"58","fix":"59","desc":"60"},{"messageId":"55","fix":"61","desc":"57"},{"messageId":"58","fix":"62","desc":"60"},{"messageId":"55","fix":"63","desc":"57"},{"messageId":"58","fix":"64","desc":"60"},"removeEscape",{"range":"65","text":"66"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"67","text":"68"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"69","text":"66"},{"range":"70","text":"68"},{"range":"71","text":"66"},{"range":"72","text":"68"},[164,165],"",[164,164],"\\",[166,167],[166,166],[168,169],[168,168]]