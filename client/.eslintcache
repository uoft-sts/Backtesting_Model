[{"C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\index.tsx":"1","C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\reportWebVitals.ts":"2","C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\App.tsx":"3","C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\Test\\index.tsx":"4","C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\ts\\components\\index.tsx":"5","C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\Home\\index.tsx":"6","C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\ts\\components\\layouts\\Jumbotron.tsx":"7","C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\Home\\tabs\\Home.tsx":"8","C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\Home\\tabs\\About.tsx":"9","C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\ts\\components\\layouts\\NavBar.tsx":"10","C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\Simulation\\index.tsx":"11"},{"size":518,"mtime":1616637418098,"results":"12","hashOfConfig":"13"},{"size":440,"mtime":1616637418100,"results":"14","hashOfConfig":"13"},{"size":896,"mtime":1616964252892,"results":"15","hashOfConfig":"13"},{"size":15180,"mtime":1616639408902,"results":"16","hashOfConfig":"13"},{"size":129,"mtime":1616637418101,"results":"17","hashOfConfig":"13"},{"size":91,"mtime":1616964126482,"results":"18","hashOfConfig":"13"},{"size":377,"mtime":1616637418102,"results":"19","hashOfConfig":"13"},{"size":243,"mtime":1616637418086,"results":"20","hashOfConfig":"13"},{"size":246,"mtime":1616637418085,"results":"21","hashOfConfig":"13"},{"size":834,"mtime":1616964232374,"results":"22","hashOfConfig":"13"},{"size":16339,"mtime":1617397990716,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1mvnwo1",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\index.tsx",[],["52","53"],"C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\reportWebVitals.ts",[],"C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\App.tsx",["54"],"import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { NavigationBar,TopHeader } from \"./ts/components/index\";\r\n\r\nimport {Home, About} from \"./Home/index\";\r\nimport Test from \"./Test/index\";\r\nimport Simulation from \"./Simulation/index\";\r\n\r\nimport \"./App.scss\";\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <NavigationBar/>\r\n      <TopHeader/>\r\n      <Container>\r\n        <Router>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route exact path=\"/test\" component={Test} />\r\n            <Route exact path=\"/about\" component={About} />\r\n            <Route exact path=\"/simulation\" component={Simulation} />\r\n          </Switch>\r\n        </Router>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\Test\\index.tsx",["55","56","57","58"],"import React, { FunctionComponent, useEffect, useState } from \"react\";\r\nimport { Form, Button, Row, Col, Table, Image, DropdownButton, Dropdown } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport Chart from \"react-apexcharts\";\r\n// import EMAGraph from \"../graph/EMA.png\"\r\n// import TEMAGraph from \"../graph/TEMA.png\"\r\n// import MACDGraph from \"../graph/MACD.png\"\r\n// import redarrow from '../image/redarrow.png'\r\n// import greenarrow from '../image/greenarrow.png'\r\n\r\ntype submitDataType = {\r\n  underlying: string;\r\n  expMonth: string;\r\n  methods: string;\r\n  daterange_from: string;\r\n  daterange_to: string;\r\n};\r\n\r\ntype ratioDataType = {\r\n  \"Cumulative Return\": number;\r\n  \"Annual return\": number;\r\n  \"Win percentage\": number;\r\n  \"Win loss ratio\": number | string;\r\n  \"Volatility\": number;\r\n  \"Annual volatility\": number;\r\n  \"Sharpe ratio\": number | string;\r\n  \"Sortino ratio\": number | string;\r\n  \"Max drawdown\": number;\r\n  \"Calmar ratio\": number | string;\r\n  \"Omega ratio\": number | string;\r\n  \"Skew\": number;\r\n  \"Kurtosis\": number;\r\n  \"Tail ratio\": number;\r\n  \"VAR\": number;\r\n};\r\n\r\ntype responseDataType = {\r\n  \"EMA\": ratioDataType;\r\n  \"TEMA\": ratioDataType;\r\n  \"MACD\": ratioDataType;\r\n  \"OHLC\": number[];\r\n  \"Close\": number[];\r\n  \"EMA_buy\": number[];\r\n  \"EMA_sell\": number[];\r\n  \"TEMA_buy\": number[];\r\n  \"TEMA_sell\": number[];\r\n  \"MACD_buy\": number[];\r\n  \"MACD_sell\": number[];\r\n};\r\n\r\n// Data Type for candlestick\r\ntype optionsDataType = {\r\n  chart: chartDataType;\r\n  title: titleDataType;\r\n  xaxis: xaxisDataType;\r\n  yaxis: yaxisDataType;\r\n  tooltip?: tooltipDataType;\r\n  markers?: markerDataType;\r\n  fill?: fillDataType;\r\n  colors?: string | string[];\r\n};\r\n\r\ntype chartDataType = {\r\n  id?: string;\r\n  type?: string;\r\n  height?: number;\r\n};\r\n\r\ntype titleDataType = {\r\n  text?: string;\r\n  align?: string;\r\n};\r\n\r\ntype xaxisDataType = {\r\n  categories?: number[];\r\n  type?: string;\r\n  labels?: labelDataType;\r\n};\r\n\r\ntype labelDataType = {\r\n  format?: string;\r\n}\r\n\r\ntype yaxisDataType = {\r\n  tooltip?: tooltipDataType;\r\n};\r\n\r\ntype tooltipDataType = {\r\n  enabled?: boolean;\r\n  x?: labelDataType;\r\n  y?: labelDataType;\r\n  shared?: boolean;\r\n  intersect?: boolean;\r\n};\r\n\r\ntype markerDataType = {\r\n  size: number[];\r\n  shape?: string;\r\n  colors?: string[] | string;\r\n};\r\n\r\ntype seriesDataType = {\r\n  name: string;\r\n  data: number[] | number[][];\r\n  type?: string;\r\n};\r\n\r\ntype fillDataType = {\r\n  type: string | string[];\r\n  opacity?: number;\r\n  image?: imageDataType;\r\n  colors?: string[] | string;\r\n};\r\n\r\ntype imageDataType = {\r\n  src: string | string[];\r\n  width?: number;\r\n  height?: number;\r\n};\r\n\r\n\r\nconst Test: FunctionComponent<any> = (props) => {\r\n  const emptyData: submitDataType = {\r\n    underlying: \"\",\r\n    expMonth: \"\",\r\n    methods: \"\",\r\n    daterange_from: \"\",\r\n    daterange_to: \"\",\r\n  };\r\n\r\n  const emptyRatio: ratioDataType = {\r\n    \"Cumulative Return\": 0,\r\n    \"Annual return\": 0,\r\n    \"Win percentage\": 0,\r\n    \"Win loss ratio\": 1,\r\n    Volatility: 0,\r\n    \"Annual volatility\": 0,\r\n    \"Sharpe ratio\": 0,\r\n    \"Sortino ratio\": 0,\r\n    \"Max drawdown\": 0,\r\n    \"Calmar ratio\": 0,\r\n    \"Omega ratio\": 0,\r\n    Skew: 0,\r\n    Kurtosis: 0,\r\n    \"Tail ratio\": 0,\r\n    VAR: 0\r\n  };\r\n\r\n  const [validatedForm, setValidatedForm] = useState<boolean>(false);\r\n  const [monthCheck, setMonthCheck] = useState<boolean>(false);\r\n  const [formData, setFormData] = useState<submitDataType>(emptyData);\r\n  const [tableHeader, setTableHeader] = useState<any>(<></>);\r\n  const [tableRows, setTableRows] = useState<any>(<></>);\r\n  const [showbutton, setShowButton] = useState<boolean>(true);\r\n  // const [showGraph, setShowGraph] = useState<boolean>(false);\r\n  const [showDropdownButton, setShowDropdownButton] = useState<boolean>(false);\r\n  const [showCandlestick, setShowCandlestick] = useState<boolean>(false);\r\n  const [showLine, setShowLine] = useState<boolean>(false);\r\n  const [resData, setResData] = useState<responseDataType>({\r\n    EMA: emptyRatio,\r\n    TEMA: emptyRatio,\r\n    MACD: emptyRatio,\r\n    \"OHLC\": [],\r\n    \"Close\": [],\r\n    \"EMA_buy\": [],\r\n    \"EMA_sell\": [],\r\n    \"TEMA_buy\": [],\r\n    \"TEMA_sell\": [],\r\n    \"MACD_buy\": [],\r\n    \"MACD_sell\": []\r\n  });\r\n  const [graphType, setGraphType] = useState<string>(\"\");\r\n  const [dropdownValue, setDropdownValue] = useState<string>(\"EMA\");\r\n  const [candlestickOptions, setCandlestickOptions] = useState<optionsDataType>({\r\n    chart: {\r\n      type: 'candlestick',\r\n      height: 350\r\n    },\r\n    title: {\r\n      text: 'CandleStick Chart',\r\n      align: 'left'\r\n    },\r\n    xaxis: {\r\n      type: 'datetime'\r\n    },\r\n    tooltip: {\r\n      x: {\r\n        format: 'dd MMM yyyy'\r\n      }\r\n    },\r\n    yaxis: {\r\n      tooltip: {\r\n        enabled: true\r\n      }\r\n    }\r\n  })\r\n  const [candlestickSeries, setCandlestickSeries] = useState<seriesDataType[]>(\r\n    [{\r\n      name: 'Statistic',\r\n      data: []\r\n    }]\r\n  );\r\n  const [lineOptions, setLineOptions] = useState<optionsDataType>({\r\n    chart: {\r\n      height: 350,\r\n      type: 'line'\r\n    },\r\n    title: {\r\n      text: 'Trading Record',\r\n      align: 'left'\r\n    },\r\n    xaxis: {\r\n      type: 'datetime'\r\n    },\r\n    tooltip: {\r\n      x: {\r\n        format: 'dd MMM yyyy'\r\n      },\r\n      shared: false,\r\n      intersect: true,\r\n    },\r\n    yaxis: {\r\n      tooltip: {\r\n        enabled: true\r\n      }\r\n    },\r\n    markers: {\r\n      size: [0,6,6],\r\n    },\r\n    fill: {\r\n      type: 'solid',\r\n      \r\n    },\r\n    colors: ['#267CE3', '#22DB35', '#FF3F00']\r\n  });\r\n\r\n  const [lineSeries, setLineSeries] = useState<seriesDataType[]>(\r\n    [{\r\n      name: 'Line',\r\n      type: \"line\",\r\n      data: []\r\n    },{\r\n      name: 'Buy',\r\n      type: \"scatter\",\r\n      data: []\r\n    },{\r\n      name: 'Sell',\r\n      type: \"scatter\",\r\n      data: []\r\n    }]\r\n  );\r\n\r\n  const handleSubmit = (e: any) => {\r\n    const form = e.currentTarget;\r\n    e.preventDefault();\r\n    if (form.checkValidity() === false) {\r\n      e.stopPropagation();\r\n      setValidatedForm(true);\r\n      setTimeout(() => {\r\n        setValidatedForm(false);\r\n      }, 3000);\r\n    } else {\r\n      console.log(formData);\r\n      axios({\r\n        method: \"post\",\r\n        url: \"http://127.0.0.1:5000/result/\",\r\n        params: formData,\r\n      })\r\n        .then((response) => {\r\n          setShowButton(!showbutton);\r\n          // setShowGraph(true);\r\n          setShowDropdownButton(true);\r\n          setShowCandlestick(true);\r\n          setShowLine(true);\r\n          let tempHeader = Object.keys(response.data[dropdownValue]).map((d) => <th>{d}</th>);\r\n          let tempRows = Object.keys(response.data[dropdownValue]).map((d) => (\r\n            <td>{response.data[dropdownValue][d]}</td>\r\n          ));\r\n          setGraphType(\"EMA\");\r\n          setResData(response.data);\r\n          setTableHeader(tempHeader);\r\n          setTableRows(tempRows);\r\n          setCandlestickSeries([{\r\n            name: 'Candlestick',\r\n            data: response.data['OHLC']\r\n          }]);\r\n          setLineSeries([{\r\n            name: 'Closing Price',\r\n            type: 'line',\r\n            data: response.data['Close']\r\n          }, {\r\n            name: 'Buy',\r\n            type: 'scatter',\r\n            data: response.data[dropdownValue+'_buy']\r\n          }, {\r\n            name: 'Sell',\r\n            type: 'scatter',\r\n            data: response.data[dropdownValue+'_sell']\r\n          }]);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleSelect=(e:string | null)=>{\r\n    console.log(e)\r\n    var tempHeader;\r\n    var tempRows;\r\n    if(e === \"EMA\"){\r\n      tempHeader = Object.keys(resData['EMA']).map((d) => <th>{d}</th>);\r\n      tempRows = Object.keys(resData['EMA']).map((d) => (\r\n        <td>{(resData['EMA'] as any)[d]}</td>\r\n      ));\r\n      setGraphType(\"EMA\");\r\n      setLineSeries([{\r\n        name: 'Closing Price',\r\n        type: 'line',\r\n        data: resData['Close']\r\n      }, {\r\n        name: 'Buy',\r\n        type: 'scatter',\r\n        data: resData['EMA_buy']\r\n      }, {\r\n        name: 'Sell',\r\n        type: 'scatter',\r\n        data: resData['EMA_sell']\r\n      }]);\r\n      console.log(graphType);\r\n    }\r\n    else if(e === \"TEMA\"){\r\n      tempHeader = Object.keys(resData['TEMA']).map((d) => <th>{d}</th>);\r\n      tempRows = Object.keys(resData['TEMA']).map((d) => (\r\n        <td>{(resData['TEMA'] as any)[d]}</td>\r\n      ));\r\n      setGraphType(\"TEMA\");\r\n      setLineSeries([{\r\n        name: 'Closing Price',\r\n        type: 'line',\r\n        data: resData['Close']\r\n      }, {\r\n        name: 'Buy',\r\n        type: 'scatter',\r\n        data: resData['TEMA_buy']\r\n      }, {\r\n        name: 'Sell',\r\n        type: 'scatter',\r\n        data: resData['TEMA_sell']\r\n      }]);\r\n      console.log(graphType);\r\n    } else {\r\n      tempHeader = Object.keys(resData['MACD']).map((d) => <th>{d}</th>);\r\n      tempRows = Object.keys(resData['MACD']).map((d) => (\r\n        <td>{(resData['MACD'] as any)[d]}</td>\r\n      ));\r\n      setGraphType(\"MACD\");\r\n      setLineSeries([{\r\n        name: 'Closing Price',\r\n        type: 'line',\r\n        data: resData['Close']\r\n      }, {\r\n        name: 'Buy',\r\n        type: 'scatter',\r\n        data: resData['MACD_buy']\r\n      }, {\r\n        name: 'Sell',\r\n        type: 'scatter',\r\n        data: resData['MACD_sell']\r\n      }]);\r\n      console.log(graphType);\r\n    }\r\n    setTableHeader(tempHeader);\r\n    setTableRows(tempRows);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {showbutton ? (\r\n        <Form noValidate validated={validatedForm} onSubmit={handleSubmit}>\r\n          <Form.Group controlId=\"underlying\">\r\n            <Form.Label>Underlying:</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Please enter underlying here\"\r\n              onChange={(e: any) => {\r\n                setFormData({ ...formData, underlying: e.target.value });\r\n              }}\r\n              value={formData.underlying}\r\n              required\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              Underlying can't be empty.\r\n            </Form.Control.Feedback>\r\n          </Form.Group>\r\n          <Form.Group controlId=\"expiremonth\">\r\n            <Form.Label>Expiration Month:</Form.Label>\r\n            <Form.Control\r\n              type=\"number\"\r\n              placeholder=\"Please enter expiration month here\"\r\n              required\r\n              isInvalid={monthCheck}\r\n              value={formData.expMonth}\r\n              onChange={(e: any) => {\r\n                if (e.target.value > 99 || e.target.value === null) {\r\n                  setMonthCheck(true);\r\n                } else {\r\n                  setMonthCheck(false);\r\n                }\r\n                setFormData({ ...formData, expMonth: e.target.value });\r\n              }}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              This field can't be empty. And you must enter no more than 2\r\n              numbers.\r\n            </Form.Control.Feedback>\r\n          </Form.Group>\r\n          <Form.Group controlId=\"methods\">\r\n            <Form.Label>Select a method:</Form.Label>\r\n            <Form.Control\r\n              as=\"select\"\r\n              placeholder=\"Select a value:\"\r\n              onChange={(e: any) => {\r\n                setFormData({ ...formData, methods: e.target.value });\r\n              }}\r\n              value={formData.methods}\r\n              required\r\n            >\r\n              <option></option>\r\n              <option>First Of Month</option>\r\n              <option>Last Trading Day</option>\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                You must select a value.\r\n              </Form.Control.Feedback>\r\n            </Form.Control>\r\n          </Form.Group>\r\n          <Row>\r\n            <Col>\r\n              <Form.Group controlId=\"startdate\">\r\n                <Form.Label>Select Start Date:</Form.Label>\r\n                <Form.Control\r\n                  type=\"date\"\r\n                  placeholder=\"Select start date:\"\r\n                  onChange={(e: any) => {\r\n                    setFormData({\r\n                      ...formData,\r\n                      daterange_from: e.target.value,\r\n                    });\r\n                  }}\r\n                  value={formData.daterange_from}\r\n                  required\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col>\r\n              <Form.Group controlId=\"enddate\">\r\n                <Form.Label>Select End Date:</Form.Label>\r\n                <Form.Control\r\n                  type=\"date\"\r\n                  placeholder=\"Select end date:\"\r\n                  onChange={(e: any) => {\r\n                    setFormData({ ...formData, daterange_to: e.target.value });\r\n                  }}\r\n                  value={formData.daterange_to}\r\n                  required\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n          </Row>\r\n          <Button type=\"submit\" className=\"btn-block mt-2\">Submit form</Button>\r\n        </Form>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <Button\r\n        variant=\"outline-primary\"\r\n        onClick={() => {\r\n          setShowButton(!showbutton);\r\n        }}\r\n        className=\"btn-block p-0 mt-3\"\r\n      >\r\n        {showbutton ? \"Hide Input Form\" : \"Show Input Form\"}\r\n      </Button>\r\n      { showDropdownButton ? (\r\n        <DropdownButton \r\n        id=\"dropdown-basic-button\" \r\n        title={dropdownValue}\r\n        onSelect={handleSelect}\r\n        className=\"mt-4 mb-4\">\r\n          <Dropdown.Item eventKey=\"EMA\" onClick={() => setDropdownValue(\"EMA\")}>EMA</Dropdown.Item>\r\n          <Dropdown.Item eventKey=\"TEMA\" onClick={() => setDropdownValue(\"TEMA\")}>TEMA</Dropdown.Item>\r\n          <Dropdown.Item eventKey=\"MACD\" onClick={() => setDropdownValue(\"MACD\")}>MACD</Dropdown.Item>\r\n        </DropdownButton>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      <Table striped bordered hover responsive>\r\n        <thead>\r\n          <tr>{tableHeader}</tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>{tableRows}</tr>\r\n        </tbody>\r\n      </Table>  \r\n\r\n      { showLine ? (\r\n        <Chart options={lineOptions} series={lineSeries} type=\"line\" width={1100} height={500}/>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      { showCandlestick ? (\r\n        <Chart options={candlestickOptions} series={candlestickSeries} type=\"candlestick\" width={1100} height={500}/>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      {/* {(function() {\r\n        if(showGraph) {\r\n          if (graphType === \"EMA\") {\r\n            console.log(\"here at ema\");\r\n            return <Image src={EMAGraph} key={Date.now()} onLoad={() => console.log(\"loaded at ema\")} fluid/>;\r\n          } else if (graphType === \"TEMA\") {\r\n            console.log(\"here at tema\");\r\n            return <Image src={TEMAGraph} key={Date.now()} onLoad={() => console.log(\"loaded at tema\")} fluid/>;\r\n          } else {\r\n            console.log(\"here at macd\");\r\n            return <Image src={MACDGraph} key={Date.now()} onLoad={() => console.log(\"loaded at macd\")}  fluid/>\r\n          }\r\n        } else {\r\n          return <></>;\r\n        }    \r\n      })()} */}\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Test;\r\n","C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\ts\\components\\index.tsx",[],"C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\Home\\index.tsx",[],"C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\ts\\components\\layouts\\Jumbotron.tsx",["59"],"import React, { FunctionComponent } from \"react\";\r\nimport { Jumbotron, Container,Button } from \"react-bootstrap\";\r\n\r\nconst TopHeader: FunctionComponent<any> = () => {\r\n  return (\r\n    <Jumbotron fluid>\r\n      <Container>\r\n        <h1>Welcome to Project Alpha</h1>\r\n        <p>Backtesting Engine</p>\r\n      </Container>\r\n    </Jumbotron>\r\n  );\r\n};\r\n\r\nexport default TopHeader;\r\n","C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\Home\\tabs\\Home.tsx",["60","61"],"import React,{ FunctionComponent,useEffect, useState} from 'react';\r\n\r\nconst Home:FunctionComponent<any> = (props) => {\r\n    return (\r\n        <div>\r\n            <h2>This is the Home page</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\Home\\tabs\\About.tsx",["62","63"],"import React,{ FunctionComponent,useEffect, useState} from 'react';\r\n\r\nconst About:FunctionComponent<any> = (props) => {\r\n    return (\r\n        <div>\r\n            <h2>This is the About page</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\ts\\components\\layouts\\NavBar.tsx",[],"C:\\STS_PROJECT\\Backtesting_Model\\client\\src\\Simulation\\index.tsx",["64"],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":1,"column":17,"nodeType":"71","messageId":"72","endLine":1,"endColumn":26},{"ruleId":"69","severity":1,"message":"73","line":1,"column":36,"nodeType":"71","messageId":"72","endLine":1,"endColumn":45},{"ruleId":"69","severity":1,"message":"74","line":2,"column":41,"nodeType":"71","messageId":"72","endLine":2,"endColumn":46},{"ruleId":"69","severity":1,"message":"75","line":174,"column":30,"nodeType":"71","messageId":"72","endLine":174,"endColumn":51},{"ruleId":"69","severity":1,"message":"76","line":203,"column":23,"nodeType":"71","messageId":"72","endLine":203,"endColumn":37},{"ruleId":"69","severity":1,"message":"77","line":2,"column":31,"nodeType":"71","messageId":"72","endLine":2,"endColumn":37},{"ruleId":"69","severity":1,"message":"73","line":1,"column":34,"nodeType":"71","messageId":"72","endLine":1,"endColumn":43},{"ruleId":"69","severity":1,"message":"78","line":1,"column":45,"nodeType":"71","messageId":"72","endLine":1,"endColumn":53},{"ruleId":"69","severity":1,"message":"73","line":1,"column":34,"nodeType":"71","messageId":"72","endLine":1,"endColumn":43},{"ruleId":"69","severity":1,"message":"78","line":1,"column":45,"nodeType":"71","messageId":"72","endLine":1,"endColumn":53},{"ruleId":"79","severity":1,"message":"80","line":24,"column":7,"nodeType":"81","endLine":24,"endColumn":9,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"@typescript-eslint/no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Image' is defined but never used.","'setCandlestickOptions' is assigned a value but never used.","'setLineOptions' is assigned a value but never used.","'Button' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loading'. Either include it or remove the dependency array.","ArrayExpression",["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [loading]",{"range":"88","text":"89"},[608,610],"[loading]"]